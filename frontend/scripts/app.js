// Handle the video upload and processing flow
document.getElementById("uploadForm").addEventListener("submit", async (event) => {
    event.preventDefault();

    const fileInput = document.getElementById("videoFile");
    const maxSize = 5 * 1024 * 1024; // 5MB size limit

    if (fileInput.files.length === 0) {
        alert("Please select a video file to upload.");
        return;
    }

    const file = fileInput.files[0];

    if (file.size > maxSize) {
        alert("File size exceeds 5MB. Please select a smaller video.");
        return;
    }

    document.getElementById("status").innerHTML = "Processing video (takes a few minutes)";
    document.getElementById("spinner").style.display = "block";

    try {
        // Upload the video
        const response = await uploadVideo(file);
        const videoId = response.video_id;

        // Poll the status of the video processing
        await pollVideoStatus(videoId);

        // Fetch and display the final video result
        await displayFinalVideo(videoId);
    } catch (error) {
        document.getElementById("status").innerHTML = `Error: ${error.message}`;
    } finally {
        document.getElementById("spinner").style.display = "none";
    }
});


// Poll the video status endpoint
async function pollVideoStatus(videoId) {
    return new Promise((resolve, reject) => {
        const eventSource = new EventSource(`${API_BASE_URL}/video_status/${videoId}`);

        eventSource.onmessage = function (event) {
            const statusUpdate = JSON.parse(event.data);
            document.getElementById("status").innerHTML = statusUpdate.message;

            if (statusUpdate.status === "completed") {
                eventSource.close();
                resolve();
            } else if (statusUpdate.status === "error") {
                eventSource.close();
                reject(new Error(statusUpdate.message));
            }
        };

        eventSource.onerror = function () {
            eventSource.close();
            reject(new Error("Failed to connect to the status stream."));
        };
    });
}

// Display the final video result
async function displayFinalVideo(videoId) {
    const result = await getVideoResult(videoId);
    document.getElementById("status").innerHTML = "Processing completed!";

    // Display the video
    document.getElementById("videoPlayer").src = result.video_url;
    document.getElementById("videoPlayer").style.display = "block";

    // Check if there's text to display and only then show the text container
    const textContainer = document.getElementById("textContainer");

    if (result.chapter_text || result.narration_script) {
        textContainer.innerHTML = `
            <h2>Chapters Text (Generated by TwelveLabs Pegasus1.1 Model)</h2>
            <pre>${result.chapter_text}</pre>
            <h2>Narration Script (Generated by OpenAI)</h2>
            <pre>${result.narration_script}</pre>
        `;
        textContainer.style.display = "block"; // Show the div only when there's content
    } else {
        textContainer.style.display = "none"; // Ensure it's hidden if no content
    }
}
